--создать базу, схему и таблицы

create database mybookshop;

\c mybookshop;

create schema bookshop;

set search_path = bookshop, pg_catalog;

--Книги
create table books(bk_id          integer,
                   bk_name        varchar(500) not null,
                   bk_author      varchar(500),
                   bk_year        varchar(30),
                   bk_publish     varchar(500),
                   bk_annotation  varchar(4000),
             constraint Books_pkey primary key(bk_id));
comment on table books is 'Книги';

comment on column books.bk_id is 'Идентификатор';
comment on column books.bk_name is 'Название';
comment on column books.bk_author is 'Автор';
comment on column books.bk_year is 'Год издания';
comment on column books.bk_publish is 'Издательство';
comment on column books.bk_annotation is 'Аннтоция';
create sequence books_bk_id_seq start with 1 increment by 1 
minvalue 1 maxvalue 9999999 cache 1 owned by books.bk_id;

create or replace function fOnUpdBooks()
returns trigger
as
$BODY$
declare
begin
  if Old.bk_name <> New.bk_name OR Old.bk_author <> New.bk_author OR Old.bk_year <> New.bk_year OR Old.bk_publish <> New.bk_publish then
    RAISE EXCEPTION 'Обновления для столбцов "bk_name","bk_author","bk_year" и "bk_publish" запрещены!';
  end if;
return New;
end;
$BODY$
language plpgsql;

create or replace trigger trOnUpdBooks
before update on books for each row
execute function fOnUpdBooks();

create or replace function fBefInsertBooks()
returns trigger
as
$BODY$
declare
begin
  if New.bk_id is null then
    New.bk_id:= nextval('books_bk_id_seq');
  end if;
return New;
end;
$BODY$
language plpgsql;

create or replace trigger trBefInsBooks
before insert on books for each row
execute function fBefInsertBooks();

--Склады
create table Storages(st_id          integer,
                      st_name        varchar(500) not null,
                      st_address     varchar(1000),
                      st_phone       varchar(100),
             constraint Storages_pkey primary key(st_id));
comment on table Storages is 'Склады';

comment on column Storages.st_id is 'Идентификатор';
comment on column Storages.st_name is 'Название';
comment on column Storages.st_address is 'Адрес';
comment on column Storages.st_phone is 'Контактный телефон';
create sequence Storages_st_id_seq start with 1 increment by 1 
minvalue 1 maxvalue 9999 cache 1 owned by Storages.st_id;

--Покупатели
create table Customers(ct_id          integer,
                       ct_fio         varchar(1000) not null,
                       ct_phone       varchar(100),
                       ct_email       varchar(100),
                       ct_address     varchar(1000),
             constraint Customes_pkey primary key(ct_id));
comment on table Customers is 'Покупатели';

comment on column Customers.ct_id is 'Идентификатор';
comment on column Customers.ct_fio is 'ФИО';
comment on column Customers.ct_phone is 'Контактный телефон';
comment on column Customers.ct_email is 'Эл.почта';
comment on column Customers.ct_address is 'Адрес';
create sequence Customers_ct_id_seq start with 1 increment by 1 
minvalue 1 maxvalue 9999999 cache 1 owned by Customers.ct_id;

create or replace function fBefInsertCustomers()
returns trigger
as
$BODY$
declare
begin
  if New.ct_id is null then
    New.ct_id:= nextval('customers_ct_id_seq');
  end if;
return New;
end;
$BODY$
language plpgsql;

create or replace trigger trBefInsCustomers
before insert on Customers for each row
execute function fBefInsertCustomers();


--Номенклатура продаж
create table Products(pr_id          integer,
                      st_id          integer,
                      bk_id          integer,
                      pr_count       integer not null check (pr_count>=0),
                      pr_price       numeric(9,2) not null check (pr_price>=0),
                      pr_deldays     integer not null check (pr_deldays>0),
             constraint Products_pkey primary key(pr_id),
             constraint Products_Storages_fkey foreign key (st_id) references Storages(st_id),
             constraint Products_Books_fkey foreign key (bk_id) references Books(bk_id));
comment on table Products is 'Номенклатура продаж';

comment on column Products.pr_id is 'Идентификатор';
comment on column Products.st_id is 'Идентификатор склада';
comment on column Products.bk_id is 'Идентификатор книги';
comment on column Products.pr_count is 'Количество';
comment on column Products.pr_price is 'Стоимость';
comment on column Products.pr_deldays is 'Дни доставки';
create sequence Products_pr_id_seq start with 1 increment by 1 
minvalue 1 maxvalue 9999999999 cache 1 owned by Products.pr_id;

create or replace function fOnUpdProducts()
returns trigger
as
$BODY$
declare
begin
  if Old.st_id <> New.st_id OR Old.bk_id <> New.bk_id then
    RAISE EXCEPTION 'Обновления для столбцов "st_id" и "bk_id" запрещены!';
  end if;
return New;
end;
$BODY$
language plpgsql;

create or replace trigger trOnUpdProducts
before update on Products for each row
execute function fOnUpdProducts();

--Заказы
create table Orders(or_id          integer,
                    ct_id          integer,
                    pr_id          integer,
                    or_date        timestamp not null,
                    or_count       integer not null check (or_count>0),
                    or_tprice      numeric(9,2) not null check (or_tprice>=0),
                    or_deldate     timestamp not null check (or_deldate>or_date),
                    or_status      varchar(20),
             constraint Orders_pkey primary key(or_id),
             constraint Orders_Customers_fkey foreign key (ct_id) references Customers(ct_id),
             constraint Orders_Products_fkey foreign key (pr_id) references Products(pr_id),
             constraint Orders_or_status_check check (or_status in ('Create','In delivery','Cancelled','Done')));
comment on table Orders is 'Заказы';

comment on column Orders.or_id is 'Идентификатор';
comment on column Orders.ct_id is 'Идентификатор покупателя';
comment on column Orders.pr_id is 'Идентификатор номенклатуры продаж';
comment on column Orders.or_date is 'Дата и время заказа';
comment on column Orders.or_count is 'Кол-во экземпляров';
comment on column Orders.or_tprice is 'Итоговая стоимость';
comment on column Orders.or_deldate is 'Дата доставки';
comment on column Orders.or_status is 'Статус заказа';
create sequence Orders_or_id_seq start with 1 increment by 1 
minvalue 1 maxvalue 9999999999 cache 1 owned by Orders.or_id;

create or replace function fOnUpdOrders()
returns trigger
as
$BODY$
declare
begin
  if Old.ct_id <> New.ct_id or Old.pr_id <> New.pr_id then
    RAISE EXCEPTION 'Обновления для столбцов "ct_id" и "pr_id" запрещены!';
  end if;
return New;
end;
$BODY$
language plpgsql;

create or replace trigger trOnUpdOrders
before update on Orders for each row
execute function fOnUpdOrders();

--Витрина наличия книг
create table ProductsRange(bk_id          integer,
                           rg_name        varchar(500) not null,
                           rg_author      varchar(500),
                           rg_tcount      integer not null check (rg_tcount>0),
                           rg_min_price   numeric(9,2) not null check (rg_min_price>=0),
                           rg_str_count   integer);
comment on table ProductsRange is 'Витрина наличия книг';

comment on column ProductsRange.bk_id is 'Идентификатор книги';
comment on column ProductsRange.rg_name is 'Название книги';
comment on column ProductsRange.rg_author is 'Автор книги';
comment on column ProductsRange.rg_tcount is 'Всего книг в наличии';
comment on column ProductsRange.rg_min_price is 'Минимальная стоимость книги';
comment on column ProductsRange.rg_str_count is 'Кол-во складов';

--Отчет по продажам
create table OrdersSummary(os_date           date not null,
                           os_total_ord_cnt  integer,
                           os_done_ord_cnt   integer,
                           os_total_smm      numeric(9,2),
                           os_done_smm       numeric(9,2),
                           os_total_bk_cnt   integer,
                           os_done_bk_cnt    integer);
comment on table OrdersSummary is 'Итоги продаж';

comment on column OrdersSummary.os_date is 'Дата продажи';
comment on column OrdersSummary.os_total_ord_cnt is 'Кол-во заказов общее';
comment on column OrdersSummary.os_done_ord_cnt is 'Кол-во заказов выполненных';
comment on column OrdersSummary.os_total_smm is 'Стоимость заказов общая';
comment on column OrdersSummary.os_done_smm is 'Стоимость заказов выполненных';
comment on column OrdersSummary.os_total_bk_cnt is 'Кол-во книг по всем заказам';
comment on column OrdersSummary.os_done_bk_cnt is 'Кол-во книг по выполненным заказам';

